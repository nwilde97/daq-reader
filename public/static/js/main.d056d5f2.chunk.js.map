{"version":3,"sources":["graph.js","App.js","index.js"],"names":["Graph","this","props","channel","voltages","ticks","i","push","v","f","className","width","height","chartType","loader","legendToggle","data","map","val","idx","options","title","legend","hAxis","maxValue","minValue","vAxis","Component","App","useState","setVoltages","setChannel","useEffect","socket","socketIOClient","on","slice","disconnect","value","onChange","event","target","key","menu","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wWA0FeA,G,4LApFP,OAAO,I,+BAUP,IARM,IAAD,EACuBC,KAAKC,MAA1BC,EADF,EACEA,QAASC,EADX,EACWA,SAMVC,EAAQ,GACNC,EAAI,EAAGA,EAAI,IAAKA,GAAG,GACvBD,EAAME,KAAK,CAACC,EAAGF,EAAGG,EAAG,KAEzB,OACI,yBAAKC,UAAU,SACX,kBAAC,IAAD,CACIC,MAAO,SACPC,OAAQ,QACRC,UAAU,YACVC,OAAQ,8CACRC,cAAc,EACdC,KAAI,CACA,CAAC,GAAI,KADL,mBAEGZ,EAASa,KAAI,SAACC,EAAKC,GAAN,MAAa,CAACA,EAAKD,QAGvCE,QAAS,CACLC,MAAM,WAAD,OAAalB,GAClBmB,OAAQ,OACRC,MAAO,CACHlB,MAAOA,EACPmB,SAAU,IACVC,SAAU,GAEdC,MAAO,CACHF,SAAU,GACVC,UAAW,Y,GAtCnBE,cC2CLC,MA1Cf,WAAgB,IAAD,EACmBC,mBAAS,CAAC,IAD7B,mBACNzB,EADM,KACI0B,EADJ,OAEiBD,mBAAS,GAF1B,mBAEN1B,EAFM,KAEG4B,EAFH,KA0BX,OAvBAC,qBAAU,WACN,IAAMC,EAASC,IAAe,KAQ9B,OAPAD,EAAOE,GAAG,QAAQ,SAAAnB,GACdZ,EAASG,KAAKS,EAAKZ,SAASD,IAC5BC,EAAWA,EAASgC,OAAO,KAC3BN,EAAY1B,MAIT,kBAAM6B,EAAOI,gBACrB,IAcC,6BACI,yBAAK3B,UAAU,WACX,4BAAQ4B,MAAOnC,EAASoC,SAAU,SAAAC,GAC9BT,EAAWS,EAAMC,OAAOH,SAf3B,WAET,IADA,IAAMlB,EAAU,GACRd,EAAI,EAAGA,EAAI,KAAMA,EACrBc,EAAQb,KAAKD,GAEjB,OAAOc,EAAQH,KAAI,SAACE,GAAD,OACf,4BAAQuB,IAAKvB,EAAKmB,MAAOnB,GAAzB,WAAuCA,EAAI,MAWlCwB,KAGT,yBAAKjC,UAAU,UACX,kBAAC,EAAD,CAAON,SAAUA,EAAUD,SAAUA,EAAU,OCpC/DyC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.d056d5f2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Chart } from \"react-google-charts\";\nimport './graph.css';\n\nclass Graph extends Component {\n    shouldComponentUpdate(){\n        return true;\n    }\n    render() {\n        const {channel, voltages} = this.props;\n        // return (\n        //     <div>\n        //         ${voltages.length}\n        //     </div>\n        // )\n        const ticks = [];\n        for(let i = 0; i < 100; i+=10){\n            ticks.push({v: i, f: ''});\n        }\n        return (\n            <div className=\"graph\">\n                <Chart\n                    width={'1000px'}\n                    height={'800px'}\n                    chartType=\"LineChart\"\n                    loader={<div>Loading Chart</div>}\n                    legendToggle={false}\n                    data={[\n                        ['', ''],\n                        ...voltages.map((val, idx)=> [idx, val])\n                        ]\n                    }\n                    options={{\n                        title: `Channel ${channel}`,\n                        legend: \"none\",\n                        hAxis: {\n                            ticks: ticks,\n                            maxValue: 100,\n                            minValue: 0\n                        },\n                        vAxis: {\n                            maxValue: 10,\n                            minValue: -10\n                        },\n                    }}\n                />\n            </div>\n\n        );\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import CanvasJSReact from './assets/canvasjs.react';\n// var CanvasJSChart = CanvasJSReact.CanvasJSChart;\n//\n// class Graph extends Component {\n//     render() {\n//         const options = {\n//             theme: \"light2\", // \"light1\", \"dark1\", \"dark2\"\n//             title:{\n//                 text: \"Channel 1\"\n//             },\n//             height: 100,\n//             width: 125,\n//             data: [{\n//                 type: \"line\",\n//                 dataPoints: this.props.data\n//             }]\n//         }\n//\n//         return (\n//             <CanvasJSChart options = {options}/>\n//         );\n//     }\n// }\n\nexport default Graph;\n","import React, {useEffect, useState} from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport './App.css';\nimport Graph from './graph'\n\nfunction App() {\n    let [voltages, setVoltages] = useState([0]);\n    let [channel, setChannel] = useState(0);\n    useEffect(() => {\n        const socket = socketIOClient(\"/\");\n        socket.on(\"scan\", data => {\n            voltages.push(data.voltages[channel]);\n            voltages = voltages.slice(-100);\n            setVoltages(voltages);\n        });\n\n        // CLEAN UP THE EFFECT\n        return () => socket.disconnect();\n    }, []);\n\n    const menu = () => {\n        const options = [];\n        for(let i = 0; i < 64; ++i){\n            options.push(i);\n        }\n        return options.map((idx) => (\n            <option key={idx} value={idx}>Channel {idx+1}</option>\n        ));\n    }\n\n\n    return (\n        <div>\n            <div className=\"options\">\n                <select value={channel} onChange={event => {\n                    setChannel(event.target.value);\n                }}>\n                    {menu()}\n                </select>\n            </div>\n            <div className=\"graphs\">\n                <Graph voltages={voltages} channel={+channel + 1}/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}